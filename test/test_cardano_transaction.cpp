// MIT License
//
// Copyright (c) 2021-2024 Viper Staking
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <catch2/catch_test_macros.hpp>

// Libcardano Headers
#include <cardano/address.hpp>
#include <cardano/crypto.hpp>
#include <cardano/encodings.hpp>
#include <cardano/ledger.hpp>
#include <cardano/transaction.hpp>

TEST_CASE("test_CardanoTransactionBuilder")
{
    // Get the signing key from the test seed phrase.
    constexpr auto seed_phrase =
        "exercise club noble adult miracle awkward problem olympic puppy "
        "private goddess piano fatal fashion vacuum";
    auto mn = cardano::Mnemonic(seed_phrase, cardano::BIP39Language::English);
    auto root_xsk = cardano::BIP32PrivateKey::fromMnemonic(mn);
    auto payment_xsk = root_xsk.deriveChild(cardano::HardenIndex(1852))
                           .deriveChild(cardano::HardenIndex(1815))
                           .deriveChild(cardano::HardenIndex(0))
                           .deriveChild(0)
                           .deriveChild(0);

    // This the the transaction CBOR generated by the cardano-cli
    constexpr auto tx_signed_cbor =
        "84a4008182582038dc919ea976ac6e834bcbd46b27aecf5da496c311a085776873a4b9"
        "c01f733f000182a20058390054947bcf6b760319bcec250ec225fd1ce63baface47e34"
        "b44b73e4f9f6d2f2ef387333e15aea9333e9d908e57a2b513ec6d762884f70ae2a011b"
        "00000002523a2b11a200583900bddcc9c7adf960e380c91dd8ef6d42cb462c4ca6c015"
        "78e8a8b3ceeae87dd4bbe7c0e63bd1c7531a66b87ed4f19be0d79fb20945361e240001"
        "1a00989680021a0002a725031a00c7093da1008182582040d883805bb6dca9bdbba85a"
        "fbc6556b34447c9ddec81f463924b4a2b711128e584087e8b8157a3e2e1421566042d2"
        "974a91d1cb5aa4864439e0665b20af2af8d917afdab774a5e28223984a02e5105adfae"
        "97d6c2e2369862b12795b4e6de26d409f5f6";

    SECTION("test_SimpleTransaction_id", "")
    {
        auto tx_input = cardano::BASE16::decode(
            "B64DEAFA7F726818607A23B354F9D3ACF945A94FE53D6C54B75715565D4DD626"
        );

        auto from_addr = cardano::BaseAddress::fromBech32(
            "addr_test1qzqcspr8cx0djx9ds9wtn9nan6k2mpw8dxc0jf4ds666urdyc9pn6xptv3c5tcx7rrzpgpzh9tyzw7ytch8709p2da6s7k8m55"
        );

        auto to_addr = cardano::BaseAddress::fromBech32(
            "addr_test1qqvhpysx9zcmwf937dr4ka5j7qc8fmstu8qdf0s6j78rl54x0vy5dzuykz980fhmnrxjqe2ud8qqmnee8826wvzq4z7qp6ks64"
        );

        auto tx_id = cardano::BASE16::decode(
            "768c6a03fb1cf2787efa0a7bf4f6b80165193996c280b0806f5f7d2ba9c681b5"
        );

        auto tx_builder = cardano::TransactionBuilder();

        tx_builder.addInput(tx_input, 0UL)
            .addOutput(from_addr, 89826139UL)
            .addOutput(to_addr, 10000000UL)
            .setFee(173861UL)
            .setTtl(7583054UL);

        REQUIRE(tx_builder.serialize().size() > 0);
        REQUIRE(
            cardano::BASE16::encode(tx_builder.getID()) ==
            cardano::BASE16::encode(tx_id)
        );
    }

    SECTION("test_SimpleTransaction_signature", "")
    {
        auto tx_input = cardano::BASE16::decode(
            "38DC919EA976AC6E834BCBD46B27AECF5DA496C311A085776873A4B9C01F733F"
        );

        auto from_addr = cardano::BaseAddress::fromBech32(
            "addr_test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx05ajz890g44z0kx6a3gsnms4c4qq8ve0n"
        );

        auto to_addr = cardano::BaseAddress::fromBech32(
            "addr_test1qz7aejw84hukpcuqeywa3mmdgt95vtzv5mqp278g4zeua6hg0h2the7qucaar36nrfntslk57xd7p4ulkgy52ds7ysqqjecqjf"
        );

        auto tx_builder = cardano::TransactionBuilder();

        tx_builder.addInput(tx_input, 0UL)
            .addOutput(from_addr, 9969478417UL)
            .addOutput(to_addr, 10000000UL)
            .setFee(173861UL)
            .setTtl(13044029UL)
            .sign(payment_xsk);

        // Assert that the CBOR generated by the code is the same as the CBOR
        // generated by cardano-cli.
        REQUIRE(
            cardano::BASE16::encode(tx_builder.serialize()) == tx_signed_cbor
        );
    }
}