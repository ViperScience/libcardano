#include <cardano/address.hpp>
#include <cardano/crypto.hpp>
#include <cardano/encodings.hpp>
#include <cardano/ledger.hpp>
#include <cardano/transaction.hpp>
#include <src/debug_utils.hpp>
#include <string>
#include <test/tests.hpp>

auto testBasic() -> void
{
    // Get the signing key from the test seed phrase.
    constexpr auto seed_phrase =
        "exercise club noble adult miracle awkward problem olympic puppy "
        "private goddess piano fatal fashion vacuum";
    auto mn = cardano::Mnemonic(seed_phrase, cardano::BIP39Language::English);
    auto root_xsk = cardano::BIP32PrivateKey::fromMnemonic(mn);
    auto payment_xsk = root_xsk.deriveChild(cardano::HardenIndex(1852))
                           .deriveChild(cardano::HardenIndex(1815))
                           .deriveChild(cardano::HardenIndex(0))
                           .deriveChild(0)
                           .deriveChild(0);

    // This the the transaction CBOR generated by the cardano-cli
    constexpr auto tx_signed_cbor =
        "84a4008182582038dc919ea976ac6e834bcbd46b27aecf5da496c311a085776873a4b9"
        "c01f733f000182a20058390054947bcf6b760319bcec250ec225fd1ce63baface47e34"
        "b44b73e4f9f6d2f2ef387333e15aea9333e9d908e57a2b513ec6d762884f70ae2a011b"
        "00000002523a2b11a200583900bddcc9c7adf960e380c91dd8ef6d42cb462c4ca6c015"
        "78e8a8b3ceeae87dd4bbe7c0e63bd1c7531a66b87ed4f19be0d79fb20945361e240001"
        "1a00989680021a0002a725031a00c7093da1008182582040d883805bb6dca9bdbba85a"
        "fbc6556b34447c9ddec81f463924b4a2b711128e584087e8b8157a3e2e1421566042d2"
        "974a91d1cb5aa4864439e0665b20af2af8d917afdab774a5e28223984a02e5105adfae"
        "97d6c2e2369862b12795b4e6de26d409f5f6";

    constexpr auto from_addr_bech32 =
        "addr_"
        "test1qp2fg770ddmqxxduasjsas39l5wwvwa04nj8ud95fde7f70k6tew7wrnx0s4465nx"
        "05ajz890g44z0kx6a3gsnms4c4qq8ve0n";
    constexpr auto to_addr_bech32 =
        "addr_"
        "test1qz7aejw84hukpcuqeywa3mmdgt95vtzv5mqp278g4zeua6hg0h2the7qucaar36nr"
        "fntslk57xd7p4ulkgy52ds7ysqqjecqjf";
    constexpr auto tx_id_hex =
        "72396b01b12fa78b726c8f5e504c6aaadc3e00397e20cb694d8727bcb8e75c0a";
    constexpr auto tx_input_hex =
        "38DC919EA976AC6E834BCBD46B27AECF5DA496C311A085776873A4B9C01F733F";
    constexpr auto tx_input_index = 0UL;
    constexpr auto tx_input_value = 100000000UL;  // lovelaces
    constexpr auto tx_amount = 10000000UL;        // lovelaces

    // The transaction structure to be filled, serialized, and signed.
    auto tx = cardano::babbage::Transaction();

    // Build the transaction input. The UTxO must exist in the wallet and will
    // be consumed by the transaction. The corresponding outputs will be
    // automatically created.
    const auto tx_input_bytes = cardano::BASE16::decode(tx_input_hex);
    auto tx_input_bytes_fixed = std::array<uint8_t, 32>{};
    std::copy_n(
        std::make_move_iterator(tx_input_bytes.begin()), 32,
        tx_input_bytes_fixed.begin()
    );
    tx.body.inputs.insert({tx_input_bytes_fixed, tx_input_index, tx_input_value}
    );

    // Create the to and from address objects from the bech32 strings
    const auto to_addr = cardano::BaseAddress::fromBech32(to_addr_bech32);
    const auto from_addr = cardano::BaseAddress::fromBech32(from_addr_bech32);

    // Add the outputs
    auto output1 = cardano::babbage::Transaction::Output();
    output1.type = cardano::babbage::Transaction::Output::Type::
        post_alonzo_transaction_output;
    output1.address = from_addr.toBytes(true);
    output1.value = 9969478417UL;
    tx.body.outputs.push_back(output1);

    auto output2 = cardano::babbage::Transaction::Output();
    output2.type = cardano::babbage::Transaction::Output::Type::
        post_alonzo_transaction_output;
    output2.address = to_addr.toBytes(true);
    output2.value = tx_amount;
    tx.body.outputs.push_back(output2);

    // Add the fees
    tx.body.fee = 173861UL;

    // Add TTL
    tx.body.ttl = 13044029UL;

    // Add the signature
    cardano::TxSigner::sign(tx, payment_xsk);

    // Assert that the CBOR generated by the code is the same as the CBOR
    // generated by cardano-cli.
    TEST_ASSERT_THROW(
        cardano::TxSerializer::toCBOR(tx) ==
        cardano::BASE16::decode(tx_signed_cbor)
    )
}

auto testAdvanced() -> void { TEST_ASSERT_THROW(true) }

auto main() -> int
{
    testBasic();
    testAdvanced();
    return 0;
}